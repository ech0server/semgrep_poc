{"rules":[{"id":"java.lang.security.audit.formatted-sql-string.formatted-sql-string","languages":["java"],"message":"Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n","metadata":{"asvs":{"control_id":"5.3.5 Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"cwe":"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","dev.semgrep.actions":[],"owasp":"A1: Injection","references":["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps","https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"],"semgrep.policy":{"id":3556,"name":"BugBar","slug":"bugbar"},"semgrep.url":"https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string","source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION"},"patterns":[{"pattern-not":"$W.execute(<... \"=~/.*TABLE *$/\" ...>);"},{"pattern-not":"$W.execute(<... \"=~/.*TABLE %s$/\" ...>);"},{"pattern-either":[{"pattern":"$W.execute($X + $Y, ...);"},{"pattern":"String $SQL = $X + $Y;\n...\n$W.execute($SQL, ...);\n"},{"pattern":"String $SQL = $X;\n...\n$SQL += $Y;\n...\n$W.execute($SQL, ...);\n"},{"pattern":"$W.execute(String.format($X, ...), ...);"},{"pattern":"String $SQL = String.format($X, ...);\n...\n$W.execute($SQL, ...);\n"},{"pattern":"String $SQL = $X;\n...\n$SQL += String.format(...);\n...\n$W.execute($SQL, ...);\n"},{"pattern":"$W.executeQuery($X + $Y, ...);"},{"pattern":"String $SQL = $X + $Y;\n...\n$W.executeQuery($SQL, ...);\n"},{"pattern":"String $SQL = $X;\n...\n$SQL += $Y;\n...\n$W.executeQuery($SQL, ...);\n"},{"pattern":"$W.executeQuery(String.format($X, ...), ...);"},{"pattern":"String $SQL = String.format($X, ...);\n...\n$W.executeQuery($SQL, ...);\n"},{"pattern":"String $SQL = $X;\n...\n$SQL += String.format(...);\n...\n$W.executeQuery($SQL, ...);\n"},{"pattern":"$W.createQuery($X + $Y, ...);"},{"pattern":"String $SQL = $X + $Y;\n...\n$W.createQuery($SQL, ...);\n"},{"pattern":"String $SQL = $X;\n...\n$SQL += $Y;\n...\n$W.createQuery($SQL, ...);\n"},{"pattern":"$W.createQuery(String.format($X, ...), ...);"},{"pattern":"String $SQL = String.format($X, ...);\n...\n$W.createQuery($SQL, ...);\n"},{"pattern":"String $SQL = $X;\n...\n$SQL += String.format(...);\n...\n$W.createQuery($SQL, ...);\n"},{"pattern":"$W.query($X + $Y, ...);"},{"pattern":"String $SQL = $X + $Y;\n...\n$W.query($SQL, ...);\n"},{"pattern":"String $SQL = $X;\n...\n$SQL += $Y;\n...\n$W.query($SQL, ...);\n"},{"pattern":"$W.query(String.format($X, ...), ...);"},{"pattern":"String $SQL = String.format($X, ...);\n...\n$W.query($SQL, ...);\n"},{"pattern":"String $SQL = $X;\n...\n$SQL += String.format(...);\n...\n$W.query($SQL, ...);\n"}]}],"severity":"WARNING"},{"id":"java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli","languages":["java"],"message":"Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n","metadata":{"dev.semgrep.actions":[],"semgrep.policy":{"id":3556,"name":"BugBar","slug":"bugbar"},"semgrep.url":"https://semgrep.dev/r/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli"},"pattern-either":[{"patterns":[{"pattern-either":[{"patterns":[{"pattern-either":[{"pattern-inside":"String $SQL = $X + $Y;\n...\n"},{"pattern-inside":"String $SQL = String.format(...);\n...\n"},{"pattern-inside":"$VAL $FUNC(...,String $SQL,...) {\n  ...\n}\n"}]},{"pattern-not-inside":"String $SQL = \"...\" + \"...\";\n...\n"},{"pattern":"$S.$METHOD($SQL,...)"}]},{"pattern":"$S.$METHOD(String.format(...),...);\n"},{"pattern":"$S.$METHOD($X + $Y,...);\n"}]},{"pattern-either":[{"pattern-inside":"java.sql.Statement $S = ...;\n...\n"},{"pattern-inside":"$TYPE $FUNC(...,java.sql.Statement $S,...) {\n  ...\n}\n"}]},{"pattern-not":"$S.$METHOD(\"...\" + \"...\",...);\n"},{"metavariable-regex":{"metavariable":"$METHOD","regex":"^(executeQuery|execute|executeUpdate|executeLargeUpdate|addBatch|nativeSQL)$"}}]}],"severity":"WARNING"},{"id":"java.spring.security.audit.spring-sqli.spring-sqli","languages":["java"],"message":"Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n","metadata":{"dev.semgrep.actions":[],"semgrep.policy":{"id":3556,"name":"BugBar","slug":"bugbar"},"semgrep.url":"https://semgrep.dev/r/java.spring.security.audit.spring-sqli.spring-sqli"},"pattern-either":[{"patterns":[{"pattern-either":[{"patterns":[{"pattern-either":[{"pattern-inside":"String $SQL = $X + $Y;\n...\n"},{"pattern-inside":"String $SQL = String.format(...);\n...\n"},{"pattern-inside":"$TYPE $FUNC(...,String $SQL,...) {\n  ...\n}\n"}]},{"pattern-not-inside":"String $SQL = \"...\" + \"...\";\n...\n"},{"pattern-either":[{"pattern":"$JT.$METHOD($SQL,...)"},{"pattern":"$JT.$METHOD(new $CALL($SQL),...)"}]}]},{"pattern":"$JT.$METHOD(String.format(...),...);\n"},{"pattern":"$JT.$METHOD($X + $Y,...);\n"}]},{"pattern-either":[{"pattern-inside":"JdbcTemplate $JT = ...;\n...\n"},{"pattern-inside":"$TYPE $FUNC(...,JdbcTemplate $JT,...) {\n  ...\n}\n"},{"pattern-inside":"JdbcOperations $JT = ...;\n...\n"},{"pattern-inside":"$TYPE $FUNC(...,JdbcOperations $JT,...) {\n  ...\n}\n"}]},{"pattern-not":"$JT.$METHOD(\"...\" + \"...\",...);\n"},{"metavariable-regex":{"metavariable":"$METHOD","regex":"^(execute|query|queryForList|queryForMap|queryForObject|queryForRowSet|queryForInt|queryForLong|update)$"}}]},{"patterns":[{"pattern-either":[{"patterns":[{"pattern-either":[{"pattern-inside":"String $SQL = $X + $Y;\n...\n"},{"pattern-inside":"String $SQL = String.format(...);\n...\n"},{"pattern-inside":"$TYPE $FUNC(...,String $SQL,...) {\n  ...\n}\n"}]},{"pattern-not-inside":"String $SQL = \"...\" + \"...\";\n...\n"},{"pattern":"$JT.batchUpdate(...,$SQL,...)"}]},{"pattern":"$JT.batchUpdate(...,String.format(...),...);\n"},{"pattern":"$JT.batchUpdate(...,$X + $Y,...);\n"}]},{"pattern-either":[{"pattern-inside":"JdbcTemplate $JT = ...;\n...\n"},{"pattern-inside":"$TYPE $FUNC(...,JdbcTemplate $JT,...) {\n  ...\n}\n"},{"pattern-inside":"JdbcOperations $JT = ...;\n...\n"},{"pattern-inside":"$TYPE $FUNC(...,JdbcOperations $JT,...) {\n  ...\n}\n"}]},{"pattern-not":"$JT.batchUpdate(...,\"...\" + \"...\",...);\n"}]},{"patterns":[{"pattern-either":[{"patterns":[{"pattern-either":[{"pattern-inside":"String $SQL = $X + $Y;\n...\n"},{"pattern-inside":"String $SQL = String.format(...);\n...\n"},{"pattern-inside":"$VAL $FUNC(...,String $SQL,...) {\n  ...\n}\n"}]},{"pattern-not-inside":"String $SQL = \"...\" + \"...\";\n...\n"},{"pattern":"new PreparedStatementCreatorFactory($SQL,...)"}]},{"pattern":"new PreparedStatementCreatorFactory(String.format(...),...)\n"},{"pattern":"new PreparedStatementCreatorFactory($X + $Y,...)\n"}]},{"pattern-not":"new PreparedStatementCreatorFactory(\"...\" + \"...\",...)\n"}]},{"patterns":[{"pattern-either":[{"patterns":[{"pattern-either":[{"pattern-inside":"String $SQL = $X + $Y;\n...\n"},{"pattern-inside":"String $SQL = String.format(...);\n...\n"},{"pattern-inside":"$VAL $FUNC(...,String $SQL,...) {\n  ...\n}\n"}]},{"pattern-not-inside":"String $SQL = \"...\" + \"...\";\n...\n"},{"pattern":"$BATCH.executeBatchUpdate($SQL,...)"}]},{"pattern":"$BATCH.executeBatchUpdate(String.format(...),...)\n"},{"pattern":"$BATCH.executeBatchUpdate($X + $Y,...)\n"}]},{"pattern-not":"$BATCH.executeBatchUpdate(\"...\" + \"...\",...)\n"},{"metavariable-regex":{"metavariable":"$BATCH","regex":"^(BatchUpdateUtils|NamedParameterBatchUpdateUtils)$"}}]}],"severity":"WARNING"},{"id":"java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string","languages":["java"],"message":"Possible JDBC injection detected. Use the parameterized query\nfeature available in queryForObject instead of concatenating or formatting strings:\n'jdbc.queryForObject(\"select * from table where name = ?\", Integer.class, parameterName);'\n","metadata":{"asvs":{"control_id":"5.3.5 Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"cwe":"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","dev.semgrep.actions":[],"owasp":"A1: Injection","semgrep.policy":{"id":3556,"name":"BugBar","slug":"bugbar"},"semgrep.url":"https://semgrep.dev/r/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string","source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION_SPRING_JDBC"},"patterns":[{"pattern-inside":"$JDBC = new JdbcTemplate(...);\n...\n"},{"pattern-either":[{"pattern":"$JDBC.queryForObject($STR + $VAR, ...);"},{"pattern":"$JDBC.queryForObject(String.format(...), ...);"},{"pattern":"String $Q = $STR + $VAR;\n...\n$JDBC.queryForObject($Q, ...);\n"},{"pattern":"String $Q = String.format(...);\n...\n$JDBC.queryForObject($Q, ...);\n"},{"pattern":"StringBuilder $Q = new StringBuilder(...);\n...\n$Q.append($STR + $VAR);\n...\n$JDBC.queryForObject($Q, ...);\n"},{"pattern":"$JDBC.queryForList($STR + $VAR);"},{"pattern":"$JDBC.queryForList(String.format(...));"},{"pattern":"String $Q = $STR + $VAR;\n...\n$JDBC.queryForList($Q);\n"},{"pattern":"String $Q = String.format(...);\n...\n$JDBC.queryForList($Q);\n"},{"pattern":"StringBuilder $Q = new StringBuilder(...);\n...\n$Q.append($STR + $VAR);\n...\n$JDBC.queryForList($Q, ...);\n"},{"pattern":"$JDBC.update($STR + $VAR);"},{"pattern":"$JDBC.update(String.format(...));"},{"pattern":"String $Q = $STR + $VAR;\n...\n$JDBC.update($Q);\n"},{"pattern":"String $Q = String.format(...);\n...\n$JDBC.update($Q);\n"},{"pattern":"StringBuilder $Q = new StringBuilder(...);\n...\n$Q.append($STR + $VAR);\n...\n$JDBC.update($Q, ...);\n"},{"pattern":"$JDBC.execute($STR + $VAR);"},{"pattern":"$JDBC.execute(String.format(...));"},{"pattern":"String $Q = $STR + $VAR;\n...\n$JDBC.execute($Q);\n"},{"pattern":"String $Q = String.format(...);\n...\n$JDBC.execute($Q);\n"},{"pattern":"StringBuilder $Q = new StringBuilder(...);\n...\n$Q.append($STR + $VAR);\n...\n$JDBC.execute($Q, ...);\n"},{"pattern":"$JDBC.insert($STR + $VAR);"},{"pattern":"$JDBC.insert(String.format(...));"},{"pattern":"String $Q = $STR + $VAR;\n...\n$JDBC.insert($Q);\n"},{"pattern":"String $Q = String.format(...);\n...\n$JDBC.insert($Q);\n"},{"pattern":"StringBuilder $Q = new StringBuilder(...);\n...\n$Q.append($STR + $VAR);\n...\n$JDBC.insert($Q, ...);\n"}]}],"severity":"WARNING"}]}
